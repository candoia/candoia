// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Accident.proto

package boa.transportation.types;

public final class Accident {
  private Accident() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface AccidentDataOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required double STATE_CASE = 1;
    /**
     * <code>required double STATE_CASE = 1;</code>
     */
    boolean hasSTATECASE();
    /**
     * <code>required double STATE_CASE = 1;</code>
     */
    double getSTATECASE();

    // required double STATE = 2;
    /**
     * <code>required double STATE = 2;</code>
     */
    boolean hasSTATE();
    /**
     * <code>required double STATE = 2;</code>
     */
    double getSTATE();

    // required double DAY = 3;
    /**
     * <code>required double DAY = 3;</code>
     */
    boolean hasDAY();
    /**
     * <code>required double DAY = 3;</code>
     */
    double getDAY();

    // required double MONTH = 4;
    /**
     * <code>required double MONTH = 4;</code>
     */
    boolean hasMONTH();
    /**
     * <code>required double MONTH = 4;</code>
     */
    double getMONTH();

    // required double YEAR = 5;
    /**
     * <code>required double YEAR = 5;</code>
     */
    boolean hasYEAR();
    /**
     * <code>required double YEAR = 5;</code>
     */
    double getYEAR();

    // required double DAY_WEEK = 6;
    /**
     * <code>required double DAY_WEEK = 6;</code>
     */
    boolean hasDAYWEEK();
    /**
     * <code>required double DAY_WEEK = 6;</code>
     */
    double getDAYWEEK();

    // required double HOUR = 7;
    /**
     * <code>required double HOUR = 7;</code>
     */
    boolean hasHOUR();
    /**
     * <code>required double HOUR = 7;</code>
     */
    double getHOUR();

    // required double MINUTE = 8;
    /**
     * <code>required double MINUTE = 8;</code>
     */
    boolean hasMINUTE();
    /**
     * <code>required double MINUTE = 8;</code>
     */
    double getMINUTE();

    // optional float LATITUDE = 9;
    /**
     * <code>optional float LATITUDE = 9;</code>
     */
    boolean hasLATITUDE();
    /**
     * <code>optional float LATITUDE = 9;</code>
     */
    float getLATITUDE();

    // optional float LONGITUD = 10;
    /**
     * <code>optional float LONGITUD = 10;</code>
     */
    boolean hasLONGITUD();
    /**
     * <code>optional float LONGITUD = 10;</code>
     */
    float getLONGITUD();

    // required double SCH_BUS = 11;
    /**
     * <code>required double SCH_BUS = 11;</code>
     */
    boolean hasSCHBUS();
    /**
     * <code>required double SCH_BUS = 11;</code>
     */
    double getSCHBUS();

    // required double FATALS = 12;
    /**
     * <code>required double FATALS = 12;</code>
     */
    boolean hasFATALS();
    /**
     * <code>required double FATALS = 12;</code>
     */
    double getFATALS();

    // required double DRUNK_DR = 13;
    /**
     * <code>required double DRUNK_DR = 13;</code>
     */
    boolean hasDRUNKDR();
    /**
     * <code>required double DRUNK_DR = 13;</code>
     */
    double getDRUNKDR();

    // required double NOT_HOUR = 14;
    /**
     * <code>required double NOT_HOUR = 14;</code>
     */
    boolean hasNOTHOUR();
    /**
     * <code>required double NOT_HOUR = 14;</code>
     */
    double getNOTHOUR();

    // required double NOT_MIN = 15;
    /**
     * <code>required double NOT_MIN = 15;</code>
     */
    boolean hasNOTMIN();
    /**
     * <code>required double NOT_MIN = 15;</code>
     */
    double getNOTMIN();

    // required double ARR_HOUR = 16;
    /**
     * <code>required double ARR_HOUR = 16;</code>
     */
    boolean hasARRHOUR();
    /**
     * <code>required double ARR_HOUR = 16;</code>
     */
    double getARRHOUR();

    // required double ARR_MIN = 17;
    /**
     * <code>required double ARR_MIN = 17;</code>
     */
    boolean hasARRMIN();
    /**
     * <code>required double ARR_MIN = 17;</code>
     */
    double getARRMIN();

    // required double HOSP_HR = 18;
    /**
     * <code>required double HOSP_HR = 18;</code>
     */
    boolean hasHOSPHR();
    /**
     * <code>required double HOSP_HR = 18;</code>
     */
    double getHOSPHR();

    // required double HOSP_MIN = 19;
    /**
     * <code>required double HOSP_MIN = 19;</code>
     */
    boolean hasHOSPMIN();
    /**
     * <code>required double HOSP_MIN = 19;</code>
     */
    double getHOSPMIN();
  }
  /**
   * Protobuf type {@code boa.transportation.types.AccidentData}
   */
  public static final class AccidentData extends
      com.google.protobuf.GeneratedMessage
      implements AccidentDataOrBuilder {
    // Use AccidentData.newBuilder() to construct.
    private AccidentData(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private AccidentData(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final AccidentData defaultInstance;
    public static AccidentData getDefaultInstance() {
      return defaultInstance;
    }

    public AccidentData getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private AccidentData(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 9: {
              bitField0_ |= 0x00000001;
              sTATECASE_ = input.readDouble();
              break;
            }
            case 17: {
              bitField0_ |= 0x00000002;
              sTATE_ = input.readDouble();
              break;
            }
            case 25: {
              bitField0_ |= 0x00000004;
              dAY_ = input.readDouble();
              break;
            }
            case 33: {
              bitField0_ |= 0x00000008;
              mONTH_ = input.readDouble();
              break;
            }
            case 41: {
              bitField0_ |= 0x00000010;
              yEAR_ = input.readDouble();
              break;
            }
            case 49: {
              bitField0_ |= 0x00000020;
              dAYWEEK_ = input.readDouble();
              break;
            }
            case 57: {
              bitField0_ |= 0x00000040;
              hOUR_ = input.readDouble();
              break;
            }
            case 65: {
              bitField0_ |= 0x00000080;
              mINUTE_ = input.readDouble();
              break;
            }
            case 77: {
              bitField0_ |= 0x00000100;
              lATITUDE_ = input.readFloat();
              break;
            }
            case 85: {
              bitField0_ |= 0x00000200;
              lONGITUD_ = input.readFloat();
              break;
            }
            case 89: {
              bitField0_ |= 0x00000400;
              sCHBUS_ = input.readDouble();
              break;
            }
            case 97: {
              bitField0_ |= 0x00000800;
              fATALS_ = input.readDouble();
              break;
            }
            case 105: {
              bitField0_ |= 0x00001000;
              dRUNKDR_ = input.readDouble();
              break;
            }
            case 113: {
              bitField0_ |= 0x00002000;
              nOTHOUR_ = input.readDouble();
              break;
            }
            case 121: {
              bitField0_ |= 0x00004000;
              nOTMIN_ = input.readDouble();
              break;
            }
            case 129: {
              bitField0_ |= 0x00008000;
              aRRHOUR_ = input.readDouble();
              break;
            }
            case 137: {
              bitField0_ |= 0x00010000;
              aRRMIN_ = input.readDouble();
              break;
            }
            case 145: {
              bitField0_ |= 0x00020000;
              hOSPHR_ = input.readDouble();
              break;
            }
            case 153: {
              bitField0_ |= 0x00040000;
              hOSPMIN_ = input.readDouble();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return Accident.internal_static_boa_transportation_types_AccidentData_descriptor;
    }

    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return Accident.internal_static_boa_transportation_types_AccidentData_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              AccidentData.class, Builder.class);
    }

    public static com.google.protobuf.Parser<AccidentData> PARSER =
        new com.google.protobuf.AbstractParser<AccidentData>() {
      public AccidentData parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new AccidentData(input, extensionRegistry);
      }
    };

    @Override
    public com.google.protobuf.Parser<AccidentData> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required double STATE_CASE = 1;
    public static final int STATE_CASE_FIELD_NUMBER = 1;
    private double sTATECASE_;
    /**
     * <code>required double STATE_CASE = 1;</code>
     */
    public boolean hasSTATECASE() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required double STATE_CASE = 1;</code>
     */
    public double getSTATECASE() {
      return sTATECASE_;
    }

    // required double STATE = 2;
    public static final int STATE_FIELD_NUMBER = 2;
    private double sTATE_;
    /**
     * <code>required double STATE = 2;</code>
     */
    public boolean hasSTATE() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required double STATE = 2;</code>
     */
    public double getSTATE() {
      return sTATE_;
    }

    // required double DAY = 3;
    public static final int DAY_FIELD_NUMBER = 3;
    private double dAY_;
    /**
     * <code>required double DAY = 3;</code>
     */
    public boolean hasDAY() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required double DAY = 3;</code>
     */
    public double getDAY() {
      return dAY_;
    }

    // required double MONTH = 4;
    public static final int MONTH_FIELD_NUMBER = 4;
    private double mONTH_;
    /**
     * <code>required double MONTH = 4;</code>
     */
    public boolean hasMONTH() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required double MONTH = 4;</code>
     */
    public double getMONTH() {
      return mONTH_;
    }

    // required double YEAR = 5;
    public static final int YEAR_FIELD_NUMBER = 5;
    private double yEAR_;
    /**
     * <code>required double YEAR = 5;</code>
     */
    public boolean hasYEAR() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required double YEAR = 5;</code>
     */
    public double getYEAR() {
      return yEAR_;
    }

    // required double DAY_WEEK = 6;
    public static final int DAY_WEEK_FIELD_NUMBER = 6;
    private double dAYWEEK_;
    /**
     * <code>required double DAY_WEEK = 6;</code>
     */
    public boolean hasDAYWEEK() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required double DAY_WEEK = 6;</code>
     */
    public double getDAYWEEK() {
      return dAYWEEK_;
    }

    // required double HOUR = 7;
    public static final int HOUR_FIELD_NUMBER = 7;
    private double hOUR_;
    /**
     * <code>required double HOUR = 7;</code>
     */
    public boolean hasHOUR() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>required double HOUR = 7;</code>
     */
    public double getHOUR() {
      return hOUR_;
    }

    // required double MINUTE = 8;
    public static final int MINUTE_FIELD_NUMBER = 8;
    private double mINUTE_;
    /**
     * <code>required double MINUTE = 8;</code>
     */
    public boolean hasMINUTE() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>required double MINUTE = 8;</code>
     */
    public double getMINUTE() {
      return mINUTE_;
    }

    // optional float LATITUDE = 9;
    public static final int LATITUDE_FIELD_NUMBER = 9;
    private float lATITUDE_;
    /**
     * <code>optional float LATITUDE = 9;</code>
     */
    public boolean hasLATITUDE() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional float LATITUDE = 9;</code>
     */
    public float getLATITUDE() {
      return lATITUDE_;
    }

    // optional float LONGITUD = 10;
    public static final int LONGITUD_FIELD_NUMBER = 10;
    private float lONGITUD_;
    /**
     * <code>optional float LONGITUD = 10;</code>
     */
    public boolean hasLONGITUD() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional float LONGITUD = 10;</code>
     */
    public float getLONGITUD() {
      return lONGITUD_;
    }

    // required double SCH_BUS = 11;
    public static final int SCH_BUS_FIELD_NUMBER = 11;
    private double sCHBUS_;
    /**
     * <code>required double SCH_BUS = 11;</code>
     */
    public boolean hasSCHBUS() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>required double SCH_BUS = 11;</code>
     */
    public double getSCHBUS() {
      return sCHBUS_;
    }

    // required double FATALS = 12;
    public static final int FATALS_FIELD_NUMBER = 12;
    private double fATALS_;
    /**
     * <code>required double FATALS = 12;</code>
     */
    public boolean hasFATALS() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>required double FATALS = 12;</code>
     */
    public double getFATALS() {
      return fATALS_;
    }

    // required double DRUNK_DR = 13;
    public static final int DRUNK_DR_FIELD_NUMBER = 13;
    private double dRUNKDR_;
    /**
     * <code>required double DRUNK_DR = 13;</code>
     */
    public boolean hasDRUNKDR() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>required double DRUNK_DR = 13;</code>
     */
    public double getDRUNKDR() {
      return dRUNKDR_;
    }

    // required double NOT_HOUR = 14;
    public static final int NOT_HOUR_FIELD_NUMBER = 14;
    private double nOTHOUR_;
    /**
     * <code>required double NOT_HOUR = 14;</code>
     */
    public boolean hasNOTHOUR() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>required double NOT_HOUR = 14;</code>
     */
    public double getNOTHOUR() {
      return nOTHOUR_;
    }

    // required double NOT_MIN = 15;
    public static final int NOT_MIN_FIELD_NUMBER = 15;
    private double nOTMIN_;
    /**
     * <code>required double NOT_MIN = 15;</code>
     */
    public boolean hasNOTMIN() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>required double NOT_MIN = 15;</code>
     */
    public double getNOTMIN() {
      return nOTMIN_;
    }

    // required double ARR_HOUR = 16;
    public static final int ARR_HOUR_FIELD_NUMBER = 16;
    private double aRRHOUR_;
    /**
     * <code>required double ARR_HOUR = 16;</code>
     */
    public boolean hasARRHOUR() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>required double ARR_HOUR = 16;</code>
     */
    public double getARRHOUR() {
      return aRRHOUR_;
    }

    // required double ARR_MIN = 17;
    public static final int ARR_MIN_FIELD_NUMBER = 17;
    private double aRRMIN_;
    /**
     * <code>required double ARR_MIN = 17;</code>
     */
    public boolean hasARRMIN() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>required double ARR_MIN = 17;</code>
     */
    public double getARRMIN() {
      return aRRMIN_;
    }

    // required double HOSP_HR = 18;
    public static final int HOSP_HR_FIELD_NUMBER = 18;
    private double hOSPHR_;
    /**
     * <code>required double HOSP_HR = 18;</code>
     */
    public boolean hasHOSPHR() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>required double HOSP_HR = 18;</code>
     */
    public double getHOSPHR() {
      return hOSPHR_;
    }

    // required double HOSP_MIN = 19;
    public static final int HOSP_MIN_FIELD_NUMBER = 19;
    private double hOSPMIN_;
    /**
     * <code>required double HOSP_MIN = 19;</code>
     */
    public boolean hasHOSPMIN() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>required double HOSP_MIN = 19;</code>
     */
    public double getHOSPMIN() {
      return hOSPMIN_;
    }

    private void initFields() {
      sTATECASE_ = 0D;
      sTATE_ = 0D;
      dAY_ = 0D;
      mONTH_ = 0D;
      yEAR_ = 0D;
      dAYWEEK_ = 0D;
      hOUR_ = 0D;
      mINUTE_ = 0D;
      lATITUDE_ = 0F;
      lONGITUD_ = 0F;
      sCHBUS_ = 0D;
      fATALS_ = 0D;
      dRUNKDR_ = 0D;
      nOTHOUR_ = 0D;
      nOTMIN_ = 0D;
      aRRHOUR_ = 0D;
      aRRMIN_ = 0D;
      hOSPHR_ = 0D;
      hOSPMIN_ = 0D;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasSTATECASE()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSTATE()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDAY()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMONTH()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasYEAR()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDAYWEEK()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasHOUR()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMINUTE()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSCHBUS()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasFATALS()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDRUNKDR()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasNOTHOUR()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasNOTMIN()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasARRHOUR()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasARRMIN()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasHOSPHR()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasHOSPMIN()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeDouble(1, sTATECASE_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeDouble(2, sTATE_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeDouble(3, dAY_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeDouble(4, mONTH_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeDouble(5, yEAR_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeDouble(6, dAYWEEK_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeDouble(7, hOUR_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeDouble(8, mINUTE_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeFloat(9, lATITUDE_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeFloat(10, lONGITUD_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeDouble(11, sCHBUS_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeDouble(12, fATALS_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeDouble(13, dRUNKDR_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeDouble(14, nOTHOUR_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeDouble(15, nOTMIN_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeDouble(16, aRRHOUR_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeDouble(17, aRRMIN_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeDouble(18, hOSPHR_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        output.writeDouble(19, hOSPMIN_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(1, sTATECASE_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(2, sTATE_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(3, dAY_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(4, mONTH_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(5, yEAR_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(6, dAYWEEK_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(7, hOUR_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(8, mINUTE_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(9, lATITUDE_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(10, lONGITUD_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(11, sCHBUS_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(12, fATALS_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(13, dRUNKDR_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(14, nOTHOUR_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(15, nOTMIN_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(16, aRRHOUR_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(17, aRRMIN_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(18, hOSPHR_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(19, hOSPMIN_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @Override
    protected Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static AccidentData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static AccidentData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static AccidentData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static AccidentData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static AccidentData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static AccidentData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static AccidentData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static AccidentData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static AccidentData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static AccidentData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(AccidentData prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code boa.transportation.types.AccidentData}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements AccidentDataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return Accident.internal_static_boa_transportation_types_AccidentData_descriptor;
      }

      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return Accident.internal_static_boa_transportation_types_AccidentData_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                AccidentData.class, Builder.class);
      }

      // Construct using boa.transportation.types.Accident.AccidentData.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        sTATECASE_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000001);
        sTATE_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000002);
        dAY_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000004);
        mONTH_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000008);
        yEAR_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000010);
        dAYWEEK_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000020);
        hOUR_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000040);
        mINUTE_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000080);
        lATITUDE_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000100);
        lONGITUD_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000200);
        sCHBUS_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000400);
        fATALS_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000800);
        dRUNKDR_ = 0D;
        bitField0_ = (bitField0_ & ~0x00001000);
        nOTHOUR_ = 0D;
        bitField0_ = (bitField0_ & ~0x00002000);
        nOTMIN_ = 0D;
        bitField0_ = (bitField0_ & ~0x00004000);
        aRRHOUR_ = 0D;
        bitField0_ = (bitField0_ & ~0x00008000);
        aRRMIN_ = 0D;
        bitField0_ = (bitField0_ & ~0x00010000);
        hOSPHR_ = 0D;
        bitField0_ = (bitField0_ & ~0x00020000);
        hOSPMIN_ = 0D;
        bitField0_ = (bitField0_ & ~0x00040000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return Accident.internal_static_boa_transportation_types_AccidentData_descriptor;
      }

      public AccidentData getDefaultInstanceForType() {
        return AccidentData.getDefaultInstance();
      }

      public AccidentData build() {
        AccidentData result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public AccidentData buildPartial() {
        AccidentData result = new AccidentData(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.sTATECASE_ = sTATECASE_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.sTATE_ = sTATE_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.dAY_ = dAY_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.mONTH_ = mONTH_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.yEAR_ = yEAR_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.dAYWEEK_ = dAYWEEK_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.hOUR_ = hOUR_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.mINUTE_ = mINUTE_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.lATITUDE_ = lATITUDE_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.lONGITUD_ = lONGITUD_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.sCHBUS_ = sCHBUS_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.fATALS_ = fATALS_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.dRUNKDR_ = dRUNKDR_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.nOTHOUR_ = nOTHOUR_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.nOTMIN_ = nOTMIN_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.aRRHOUR_ = aRRHOUR_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00010000;
        }
        result.aRRMIN_ = aRRMIN_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00020000;
        }
        result.hOSPHR_ = hOSPHR_;
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00040000;
        }
        result.hOSPMIN_ = hOSPMIN_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof AccidentData) {
          return mergeFrom((AccidentData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(AccidentData other) {
        if (other == AccidentData.getDefaultInstance()) return this;
        if (other.hasSTATECASE()) {
          setSTATECASE(other.getSTATECASE());
        }
        if (other.hasSTATE()) {
          setSTATE(other.getSTATE());
        }
        if (other.hasDAY()) {
          setDAY(other.getDAY());
        }
        if (other.hasMONTH()) {
          setMONTH(other.getMONTH());
        }
        if (other.hasYEAR()) {
          setYEAR(other.getYEAR());
        }
        if (other.hasDAYWEEK()) {
          setDAYWEEK(other.getDAYWEEK());
        }
        if (other.hasHOUR()) {
          setHOUR(other.getHOUR());
        }
        if (other.hasMINUTE()) {
          setMINUTE(other.getMINUTE());
        }
        if (other.hasLATITUDE()) {
          setLATITUDE(other.getLATITUDE());
        }
        if (other.hasLONGITUD()) {
          setLONGITUD(other.getLONGITUD());
        }
        if (other.hasSCHBUS()) {
          setSCHBUS(other.getSCHBUS());
        }
        if (other.hasFATALS()) {
          setFATALS(other.getFATALS());
        }
        if (other.hasDRUNKDR()) {
          setDRUNKDR(other.getDRUNKDR());
        }
        if (other.hasNOTHOUR()) {
          setNOTHOUR(other.getNOTHOUR());
        }
        if (other.hasNOTMIN()) {
          setNOTMIN(other.getNOTMIN());
        }
        if (other.hasARRHOUR()) {
          setARRHOUR(other.getARRHOUR());
        }
        if (other.hasARRMIN()) {
          setARRMIN(other.getARRMIN());
        }
        if (other.hasHOSPHR()) {
          setHOSPHR(other.getHOSPHR());
        }
        if (other.hasHOSPMIN()) {
          setHOSPMIN(other.getHOSPMIN());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasSTATECASE()) {
          
          return false;
        }
        if (!hasSTATE()) {
          
          return false;
        }
        if (!hasDAY()) {
          
          return false;
        }
        if (!hasMONTH()) {
          
          return false;
        }
        if (!hasYEAR()) {
          
          return false;
        }
        if (!hasDAYWEEK()) {
          
          return false;
        }
        if (!hasHOUR()) {
          
          return false;
        }
        if (!hasMINUTE()) {
          
          return false;
        }
        if (!hasSCHBUS()) {
          
          return false;
        }
        if (!hasFATALS()) {
          
          return false;
        }
        if (!hasDRUNKDR()) {
          
          return false;
        }
        if (!hasNOTHOUR()) {
          
          return false;
        }
        if (!hasNOTMIN()) {
          
          return false;
        }
        if (!hasARRHOUR()) {
          
          return false;
        }
        if (!hasARRMIN()) {
          
          return false;
        }
        if (!hasHOSPHR()) {
          
          return false;
        }
        if (!hasHOSPMIN()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        AccidentData parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (AccidentData) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required double STATE_CASE = 1;
      private double sTATECASE_ ;
      /**
       * <code>required double STATE_CASE = 1;</code>
       */
      public boolean hasSTATECASE() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required double STATE_CASE = 1;</code>
       */
      public double getSTATECASE() {
        return sTATECASE_;
      }
      /**
       * <code>required double STATE_CASE = 1;</code>
       */
      public Builder setSTATECASE(double value) {
        bitField0_ |= 0x00000001;
        sTATECASE_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double STATE_CASE = 1;</code>
       */
      public Builder clearSTATECASE() {
        bitField0_ = (bitField0_ & ~0x00000001);
        sTATECASE_ = 0D;
        onChanged();
        return this;
      }

      // required double STATE = 2;
      private double sTATE_ ;
      /**
       * <code>required double STATE = 2;</code>
       */
      public boolean hasSTATE() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required double STATE = 2;</code>
       */
      public double getSTATE() {
        return sTATE_;
      }
      /**
       * <code>required double STATE = 2;</code>
       */
      public Builder setSTATE(double value) {
        bitField0_ |= 0x00000002;
        sTATE_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double STATE = 2;</code>
       */
      public Builder clearSTATE() {
        bitField0_ = (bitField0_ & ~0x00000002);
        sTATE_ = 0D;
        onChanged();
        return this;
      }

      // required double DAY = 3;
      private double dAY_ ;
      /**
       * <code>required double DAY = 3;</code>
       */
      public boolean hasDAY() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required double DAY = 3;</code>
       */
      public double getDAY() {
        return dAY_;
      }
      /**
       * <code>required double DAY = 3;</code>
       */
      public Builder setDAY(double value) {
        bitField0_ |= 0x00000004;
        dAY_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double DAY = 3;</code>
       */
      public Builder clearDAY() {
        bitField0_ = (bitField0_ & ~0x00000004);
        dAY_ = 0D;
        onChanged();
        return this;
      }

      // required double MONTH = 4;
      private double mONTH_ ;
      /**
       * <code>required double MONTH = 4;</code>
       */
      public boolean hasMONTH() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required double MONTH = 4;</code>
       */
      public double getMONTH() {
        return mONTH_;
      }
      /**
       * <code>required double MONTH = 4;</code>
       */
      public Builder setMONTH(double value) {
        bitField0_ |= 0x00000008;
        mONTH_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double MONTH = 4;</code>
       */
      public Builder clearMONTH() {
        bitField0_ = (bitField0_ & ~0x00000008);
        mONTH_ = 0D;
        onChanged();
        return this;
      }

      // required double YEAR = 5;
      private double yEAR_ ;
      /**
       * <code>required double YEAR = 5;</code>
       */
      public boolean hasYEAR() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required double YEAR = 5;</code>
       */
      public double getYEAR() {
        return yEAR_;
      }
      /**
       * <code>required double YEAR = 5;</code>
       */
      public Builder setYEAR(double value) {
        bitField0_ |= 0x00000010;
        yEAR_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double YEAR = 5;</code>
       */
      public Builder clearYEAR() {
        bitField0_ = (bitField0_ & ~0x00000010);
        yEAR_ = 0D;
        onChanged();
        return this;
      }

      // required double DAY_WEEK = 6;
      private double dAYWEEK_ ;
      /**
       * <code>required double DAY_WEEK = 6;</code>
       */
      public boolean hasDAYWEEK() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>required double DAY_WEEK = 6;</code>
       */
      public double getDAYWEEK() {
        return dAYWEEK_;
      }
      /**
       * <code>required double DAY_WEEK = 6;</code>
       */
      public Builder setDAYWEEK(double value) {
        bitField0_ |= 0x00000020;
        dAYWEEK_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double DAY_WEEK = 6;</code>
       */
      public Builder clearDAYWEEK() {
        bitField0_ = (bitField0_ & ~0x00000020);
        dAYWEEK_ = 0D;
        onChanged();
        return this;
      }

      // required double HOUR = 7;
      private double hOUR_ ;
      /**
       * <code>required double HOUR = 7;</code>
       */
      public boolean hasHOUR() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>required double HOUR = 7;</code>
       */
      public double getHOUR() {
        return hOUR_;
      }
      /**
       * <code>required double HOUR = 7;</code>
       */
      public Builder setHOUR(double value) {
        bitField0_ |= 0x00000040;
        hOUR_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double HOUR = 7;</code>
       */
      public Builder clearHOUR() {
        bitField0_ = (bitField0_ & ~0x00000040);
        hOUR_ = 0D;
        onChanged();
        return this;
      }

      // required double MINUTE = 8;
      private double mINUTE_ ;
      /**
       * <code>required double MINUTE = 8;</code>
       */
      public boolean hasMINUTE() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>required double MINUTE = 8;</code>
       */
      public double getMINUTE() {
        return mINUTE_;
      }
      /**
       * <code>required double MINUTE = 8;</code>
       */
      public Builder setMINUTE(double value) {
        bitField0_ |= 0x00000080;
        mINUTE_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double MINUTE = 8;</code>
       */
      public Builder clearMINUTE() {
        bitField0_ = (bitField0_ & ~0x00000080);
        mINUTE_ = 0D;
        onChanged();
        return this;
      }

      // optional float LATITUDE = 9;
      private float lATITUDE_ ;
      /**
       * <code>optional float LATITUDE = 9;</code>
       */
      public boolean hasLATITUDE() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional float LATITUDE = 9;</code>
       */
      public float getLATITUDE() {
        return lATITUDE_;
      }
      /**
       * <code>optional float LATITUDE = 9;</code>
       */
      public Builder setLATITUDE(float value) {
        bitField0_ |= 0x00000100;
        lATITUDE_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float LATITUDE = 9;</code>
       */
      public Builder clearLATITUDE() {
        bitField0_ = (bitField0_ & ~0x00000100);
        lATITUDE_ = 0F;
        onChanged();
        return this;
      }

      // optional float LONGITUD = 10;
      private float lONGITUD_ ;
      /**
       * <code>optional float LONGITUD = 10;</code>
       */
      public boolean hasLONGITUD() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional float LONGITUD = 10;</code>
       */
      public float getLONGITUD() {
        return lONGITUD_;
      }
      /**
       * <code>optional float LONGITUD = 10;</code>
       */
      public Builder setLONGITUD(float value) {
        bitField0_ |= 0x00000200;
        lONGITUD_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float LONGITUD = 10;</code>
       */
      public Builder clearLONGITUD() {
        bitField0_ = (bitField0_ & ~0x00000200);
        lONGITUD_ = 0F;
        onChanged();
        return this;
      }

      // required double SCH_BUS = 11;
      private double sCHBUS_ ;
      /**
       * <code>required double SCH_BUS = 11;</code>
       */
      public boolean hasSCHBUS() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>required double SCH_BUS = 11;</code>
       */
      public double getSCHBUS() {
        return sCHBUS_;
      }
      /**
       * <code>required double SCH_BUS = 11;</code>
       */
      public Builder setSCHBUS(double value) {
        bitField0_ |= 0x00000400;
        sCHBUS_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double SCH_BUS = 11;</code>
       */
      public Builder clearSCHBUS() {
        bitField0_ = (bitField0_ & ~0x00000400);
        sCHBUS_ = 0D;
        onChanged();
        return this;
      }

      // required double FATALS = 12;
      private double fATALS_ ;
      /**
       * <code>required double FATALS = 12;</code>
       */
      public boolean hasFATALS() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>required double FATALS = 12;</code>
       */
      public double getFATALS() {
        return fATALS_;
      }
      /**
       * <code>required double FATALS = 12;</code>
       */
      public Builder setFATALS(double value) {
        bitField0_ |= 0x00000800;
        fATALS_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double FATALS = 12;</code>
       */
      public Builder clearFATALS() {
        bitField0_ = (bitField0_ & ~0x00000800);
        fATALS_ = 0D;
        onChanged();
        return this;
      }

      // required double DRUNK_DR = 13;
      private double dRUNKDR_ ;
      /**
       * <code>required double DRUNK_DR = 13;</code>
       */
      public boolean hasDRUNKDR() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>required double DRUNK_DR = 13;</code>
       */
      public double getDRUNKDR() {
        return dRUNKDR_;
      }
      /**
       * <code>required double DRUNK_DR = 13;</code>
       */
      public Builder setDRUNKDR(double value) {
        bitField0_ |= 0x00001000;
        dRUNKDR_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double DRUNK_DR = 13;</code>
       */
      public Builder clearDRUNKDR() {
        bitField0_ = (bitField0_ & ~0x00001000);
        dRUNKDR_ = 0D;
        onChanged();
        return this;
      }

      // required double NOT_HOUR = 14;
      private double nOTHOUR_ ;
      /**
       * <code>required double NOT_HOUR = 14;</code>
       */
      public boolean hasNOTHOUR() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>required double NOT_HOUR = 14;</code>
       */
      public double getNOTHOUR() {
        return nOTHOUR_;
      }
      /**
       * <code>required double NOT_HOUR = 14;</code>
       */
      public Builder setNOTHOUR(double value) {
        bitField0_ |= 0x00002000;
        nOTHOUR_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double NOT_HOUR = 14;</code>
       */
      public Builder clearNOTHOUR() {
        bitField0_ = (bitField0_ & ~0x00002000);
        nOTHOUR_ = 0D;
        onChanged();
        return this;
      }

      // required double NOT_MIN = 15;
      private double nOTMIN_ ;
      /**
       * <code>required double NOT_MIN = 15;</code>
       */
      public boolean hasNOTMIN() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>required double NOT_MIN = 15;</code>
       */
      public double getNOTMIN() {
        return nOTMIN_;
      }
      /**
       * <code>required double NOT_MIN = 15;</code>
       */
      public Builder setNOTMIN(double value) {
        bitField0_ |= 0x00004000;
        nOTMIN_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double NOT_MIN = 15;</code>
       */
      public Builder clearNOTMIN() {
        bitField0_ = (bitField0_ & ~0x00004000);
        nOTMIN_ = 0D;
        onChanged();
        return this;
      }

      // required double ARR_HOUR = 16;
      private double aRRHOUR_ ;
      /**
       * <code>required double ARR_HOUR = 16;</code>
       */
      public boolean hasARRHOUR() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>required double ARR_HOUR = 16;</code>
       */
      public double getARRHOUR() {
        return aRRHOUR_;
      }
      /**
       * <code>required double ARR_HOUR = 16;</code>
       */
      public Builder setARRHOUR(double value) {
        bitField0_ |= 0x00008000;
        aRRHOUR_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double ARR_HOUR = 16;</code>
       */
      public Builder clearARRHOUR() {
        bitField0_ = (bitField0_ & ~0x00008000);
        aRRHOUR_ = 0D;
        onChanged();
        return this;
      }

      // required double ARR_MIN = 17;
      private double aRRMIN_ ;
      /**
       * <code>required double ARR_MIN = 17;</code>
       */
      public boolean hasARRMIN() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>required double ARR_MIN = 17;</code>
       */
      public double getARRMIN() {
        return aRRMIN_;
      }
      /**
       * <code>required double ARR_MIN = 17;</code>
       */
      public Builder setARRMIN(double value) {
        bitField0_ |= 0x00010000;
        aRRMIN_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double ARR_MIN = 17;</code>
       */
      public Builder clearARRMIN() {
        bitField0_ = (bitField0_ & ~0x00010000);
        aRRMIN_ = 0D;
        onChanged();
        return this;
      }

      // required double HOSP_HR = 18;
      private double hOSPHR_ ;
      /**
       * <code>required double HOSP_HR = 18;</code>
       */
      public boolean hasHOSPHR() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>required double HOSP_HR = 18;</code>
       */
      public double getHOSPHR() {
        return hOSPHR_;
      }
      /**
       * <code>required double HOSP_HR = 18;</code>
       */
      public Builder setHOSPHR(double value) {
        bitField0_ |= 0x00020000;
        hOSPHR_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double HOSP_HR = 18;</code>
       */
      public Builder clearHOSPHR() {
        bitField0_ = (bitField0_ & ~0x00020000);
        hOSPHR_ = 0D;
        onChanged();
        return this;
      }

      // required double HOSP_MIN = 19;
      private double hOSPMIN_ ;
      /**
       * <code>required double HOSP_MIN = 19;</code>
       */
      public boolean hasHOSPMIN() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>required double HOSP_MIN = 19;</code>
       */
      public double getHOSPMIN() {
        return hOSPMIN_;
      }
      /**
       * <code>required double HOSP_MIN = 19;</code>
       */
      public Builder setHOSPMIN(double value) {
        bitField0_ |= 0x00040000;
        hOSPMIN_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double HOSP_MIN = 19;</code>
       */
      public Builder clearHOSPMIN() {
        bitField0_ = (bitField0_ & ~0x00040000);
        hOSPMIN_ = 0D;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:boa.transportation.types.AccidentData)
    }

    static {
      defaultInstance = new AccidentData(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:boa.transportation.types.AccidentData)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_boa_transportation_types_AccidentData_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_boa_transportation_types_AccidentData_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    String[] descriptorData = {
      "\n\016Accident.proto\022\030boa.transportation.typ" +
      "es\"\313\002\n\014AccidentData\022\022\n\nSTATE_CASE\030\001 \002(\001\022" +
      "\r\n\005STATE\030\002 \002(\001\022\013\n\003DAY\030\003 \002(\001\022\r\n\005MONTH\030\004 \002" +
      "(\001\022\014\n\004YEAR\030\005 \002(\001\022\020\n\010DAY_WEEK\030\006 \002(\001\022\014\n\004HO" +
      "UR\030\007 \002(\001\022\016\n\006MINUTE\030\010 \002(\001\022\020\n\010LATITUDE\030\t \001" +
      "(\002\022\020\n\010LONGITUD\030\n \001(\002\022\017\n\007SCH_BUS\030\013 \002(\001\022\016\n" +
      "\006FATALS\030\014 \002(\001\022\020\n\010DRUNK_DR\030\r \002(\001\022\020\n\010NOT_H" +
      "OUR\030\016 \002(\001\022\017\n\007NOT_MIN\030\017 \002(\001\022\020\n\010ARR_HOUR\030\020" +
      " \002(\001\022\017\n\007ARR_MIN\030\021 \002(\001\022\017\n\007HOSP_HR\030\022 \002(\001\022\020" +
      "\n\010HOSP_MIN\030\023 \002(\001"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_boa_transportation_types_AccidentData_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_boa_transportation_types_AccidentData_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_boa_transportation_types_AccidentData_descriptor,
              new String[] { "STATECASE", "STATE", "DAY", "MONTH", "YEAR", "DAYWEEK", "HOUR", "MINUTE", "LATITUDE", "LONGITUD", "SCHBUS", "FATALS", "DRUNKDR", "NOTHOUR", "NOTMIN", "ARRHOUR", "ARRMIN", "HOSPHR", "HOSPMIN", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
